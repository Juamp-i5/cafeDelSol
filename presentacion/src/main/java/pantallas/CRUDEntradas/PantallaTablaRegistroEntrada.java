package pantallas.CRUDEntradas;

import DTOs.CRUDEntradas.DetalleEntradaDTO;
import DTOs.CRUDEntradas.EntradaNuevaDTO;
import DTOs.CRUDIngredientes.DetallesIngredienteViejoDTO;
import DTOs.CRUDIngredientes.UnidadMedida;
import control.ControlNavegacion;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pablo
 */
public final class PantallaTablaRegistroEntrada extends javax.swing.JFrame {

    private final List<DetalleEntradaDTO> registroNuevo = new ArrayList<>();
    private EntradaNuevaDTO entrada;
    private DetalleEntradaDTO detalle;
    private DefaultTableModel modeloTablaIngrdientes;

    /**
     * Creates new form PantallaTablaRegistroEntrada
     *
     *
     */
    public PantallaTablaRegistroEntrada() {
        initComponents();
        modeloTablaIngrdientes = (DefaultTableModel) jTable1.getModel();
    }

    private double parseDoubleSafely(Object value) {
        if (value == null) {
            return 0.0;
        }

        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        } else if (value instanceof String) {
            try {
                return Double.parseDouble((String) value);
            } catch (NumberFormatException e) {
                System.out.println("Valor no numérico: " + value);
            }
        }
        return 0.0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BtnVolverAtras = new javax.swing.JButton();
        BtnConfirmar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        LbTitulo = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        LbProveedor = new javax.swing.JLabel();
        TFProveedor = new javax.swing.JTextField();
        BtnAgregarIngrediente = new javax.swing.JButton();
        BtnCancelar = new javax.swing.JButton();
        TablaRegistro = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BtnVolverAtras.setText("<--");
        BtnVolverAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnVolverAtrasActionPerformed(evt);
            }
        });

        BtnConfirmar.setText("Confirmar");
        BtnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConfirmarActionPerformed(evt);
            }
        });

        LbTitulo.setText("Registro Entrada");

        LbProveedor.setText("Proveedor");

        BtnAgregarIngrediente.setText("Agregar Ingrediente");
        BtnAgregarIngrediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarIngredienteActionPerformed(evt);
            }
        });

        BtnCancelar.setText("Cancelar Ingrediente");
        BtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCancelarActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Stock actual", "Cantidad agregada", "Unidad de medida", "Precio unitario", "Precio total", "Estado"
            }
        ));
        TablaRegistro.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnVolverAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(BtnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(LbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(TablaRegistro)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LbProveedor)
                            .addComponent(TFProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(244, 244, 244)
                        .addComponent(BtnAgregarIngrediente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BtnCancelar)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BtnAgregarIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BtnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LbProveedor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TFProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TablaRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnVolverAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LbTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnVolverAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnVolverAtrasActionPerformed
        ControlNavegacion.mostrarPantallaHistorialEntradas();
        this.dispose();
    }//GEN-LAST:event_BtnVolverAtrasActionPerformed

    private void BtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCancelarActionPerformed
        int fila = jTable1.getSelectedRow();
        if (fila != -1) {
            modeloTablaIngrdientes.removeRow(fila);
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.");
        }
    }//GEN-LAST:event_BtnCancelarActionPerformed

    private void BtnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConfirmarActionPerformed
        int respuesta = JOptionPane.showConfirmDialog(
                this,
                "¿Deseas realizar el registro?",
                "Registro",
                JOptionPane.YES_NO_OPTION
        );

        if (respuesta == JOptionPane.YES_OPTION) {
            if (modeloTablaIngrdientes.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "Agregue al menos un ingrediente.");
                return;
            }
            if (TFProveedor.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Ingrese un proveedor válido.");
                return;
            }

            if (detalle == null) {
                detalle = new DetalleEntradaDTO();
            }
            if (entrada == null) {
                entrada = new EntradaNuevaDTO();
            }
            
            registroNuevo.clear();

            double totalEntrada = 0.0;
            double totalCantidadIngredientes = 0.0;

            for (int i = 0; i < modeloTablaIngrdientes.getRowCount(); i++) {
                Double cantidadAgregada = null;
                Double precioUnitario = null;
                String nombreIngrediente = null;
                Double stockActual = null;
                Double precioTotal = 0.0;

                Object nombreObj = modeloTablaIngrdientes.getValueAt(i, 0);
                Object stockObj = modeloTablaIngrdientes.getValueAt(i, 1);
                Object cantidadObj = modeloTablaIngrdientes.getValueAt(i, 2);
                UnidadMedida unidad = (UnidadMedida) modeloTablaIngrdientes.getValueAt(i, 3);
                Object precioUnitarioObj = modeloTablaIngrdientes.getValueAt(i, 4);

                if (nombreObj != null) {
                    nombreIngrediente = nombreObj.toString();
                }
                if (stockObj instanceof Number) {
                    stockActual = ((Number) stockObj).doubleValue();
                }

                try {
                    if (cantidadObj instanceof String) {
                        cantidadAgregada = Double.valueOf((String) cantidadObj);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Cantidad inválida en fila " + i);
                    return;
                }

                try {
                    if (precioUnitarioObj instanceof String) {
                        precioUnitario = Double.valueOf((String) precioUnitarioObj);
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Precio unitario inválido en fila " + i);
                    return;
                }

                if (cantidadAgregada == null || precioUnitario == null) {
                    JOptionPane.showMessageDialog(this, "Complete la cantidad agregada y precio unitario en la fila " + i+ "para realizar el registro");
                    return;
                }

//                if (cantidadAgregada == null && precioUnitario != null) {
//                    JOptionPane.showMessageDialog(this, "Ingrese la cantidad en la fila " + i + ".");
//                    return;
//                }
//                if (cantidadAgregada != null && precioUnitario == null) {
//                    JOptionPane.showMessageDialog(this, "Ingrese el precio unitario en la fila " + i + ".");
//                    return;
//                }
//                if (cantidadAgregada == null && precioUnitario == null) {
//                    JOptionPane.showMessageDialog(this, "Ingrese cantidad y precio en la fila " + i + ".");
//                    return;
//                }

                precioTotal = cantidadAgregada * precioUnitario;
                modeloTablaIngrdientes.setValueAt(precioTotal, i, 5);

//                Object precioTotalObj = modeloTablaIngrdientes.getValueAt(i, 5);
//                if (precioTotalObj instanceof Number) {
//                    precioTotal = ((Number) precioTotalObj).doubleValue();
//                }

                System.out.println("Tipo de cantidad agregada: " + cantidadAgregada);
                System.out.println("Tipo de precio unitario: " + precioUnitario);
                System.out.println("Tipo de precio total: " + precioTotal);

                DetalleEntradaDTO preRegistro = new DetalleEntradaDTO();
                preRegistro.setNombreIngrediente(nombreIngrediente);
                preRegistro.setCantidadIngrediente(cantidadAgregada);
                preRegistro.setPrecioUnitario(precioUnitario);
                preRegistro.setPrecioTotal(precioTotal);

                //Obtener ingrediente por nombre
                
                //Sumar Stock
                
//          preRegistro.setIngrediente(ingrediente);

                //Buscar proveedor por nombre
                
//          preRegistro.getIngrediente().setNombreProveedor(nombreProveedor);

                registroNuevo.add(preRegistro);

                totalEntrada += precioTotal;
                totalCantidadIngredientes += cantidadAgregada;
            }

            entrada.setFechaHora(LocalDateTime.now());
            entrada.setProveedor(TFProveedor.getText().trim());
            System.out.println("Total entrada: " + totalEntrada);
            entrada.setPrecioTotal(totalEntrada);
            entrada.setDetallesEntrada(registroNuevo);

            ControlNavegacion.registrarEntrada(entrada);
            ControlNavegacion.mostrarPantallaHistorialEntradas();
            this.dispose();
        }
    }//GEN-LAST:event_BtnConfirmarActionPerformed

    private void BtnAgregarIngredienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarIngredienteActionPerformed
        if (modeloTablaIngrdientes == null) {
            modeloTablaIngrdientes = (DefaultTableModel) jTable1.getModel();
        }

        modeloTablaIngrdientes.addTableModelListener(e -> {
            int row = e.getFirstRow();
            int col = e.getColumn();

            if (col == 2 || col == 4) {
                try {
                    double cantidad = parseDoubleSafely(modeloTablaIngrdientes.getValueAt(row, 2));
                    double precioUnitario = parseDoubleSafely(modeloTablaIngrdientes.getValueAt(row, 4));
                    double total = cantidad * precioUnitario;

                    modeloTablaIngrdientes.setValueAt(total, row, 5);
                } catch (Exception ex) {
                    System.out.println("Error al calcular el precio total: " + ex.getMessage());
                }
            }
        });

        BuscadorIngredientesSimulado buscador = new BuscadorIngredientesSimulado((DetallesIngredienteViejoDTO ingredienteNuevo) -> {
            if (ingredienteNuevo == null) {
                System.out.println("No se seleccionó ningún ingrediente.");
                return;
            }

            boolean encontrado = false;

            for (int i = 0; i < modeloTablaIngrdientes.getRowCount(); i++) {
                String nombreExistente = String.valueOf(modeloTablaIngrdientes.getValueAt(i, 0));

                if (nombreExistente.equalsIgnoreCase(ingredienteNuevo.getNombre())) {
                    Double cantidadActual = parseDoubleSafely(modeloTablaIngrdientes.getValueAt(i, 2));
                    Double precioUnitario = parseDoubleSafely(modeloTablaIngrdientes.getValueAt(i, 4));
                    modeloTablaIngrdientes.setValueAt(cantidadActual * precioUnitario, i, 5);
                    modeloTablaIngrdientes.setValueAt(precioUnitario, i, 4);
                    modeloTablaIngrdientes.setValueAt(cantidadActual, i, 2);
                    encontrado = true;
                    break;
                }
            }

            if (!encontrado) {
                modeloTablaIngrdientes.addRow(new Object[]{
                    ingredienteNuevo.getNombre(),
                    ingredienteNuevo.getCantidadDisponible(),
                    null,
                    ingredienteNuevo.getUnidadMedida(),
                    null,
                    null,
                    ingredienteNuevo.getNivelStock()
                });
            }
        });

        buscador.setVisible(true);
    }//GEN-LAST:event_BtnAgregarIngredienteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregarIngrediente;
    private javax.swing.JButton BtnCancelar;
    private javax.swing.JButton BtnConfirmar;
    private javax.swing.JButton BtnVolverAtras;
    private javax.swing.JLabel LbProveedor;
    private javax.swing.JLabel LbTitulo;
    private javax.swing.JTextField TFProveedor;
    private javax.swing.JScrollPane TablaRegistro;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
